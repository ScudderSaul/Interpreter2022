<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>The State Machine Parser turns a script like </title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">


<meta name="Microsoft Theme" content="expeditn 001, default"><meta name="Microsoft Border" content="tlb, default"></head>

<body background="_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#006600" vlink="#669966" alink="#990000"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua, times new roman, times">

<h1>_Zen_Soft Forth Interpreter</h1>

<!--msthemeseparator--><p align="center"><img src="_themes/expeditn/exphorsd.gif" width="300" height="10"></p>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%"><!--mstheme--><font face="book antiqua, times new roman, times">

<p>&nbsp;</p>
<!--mstheme--></font></td><td valign="top" width="24"></td><!--msnavigation--><td valign="top"><!--mstheme--><font face="book antiqua, times new roman, times">

<p>The State Machine Parser turns a script like &quot;test.sc&quot; into a c++ header file
&quot;test.h&quot;.&nbsp; <br>
<br>
At present only Windows NT and Win 2000 are supported.<br>
<br>
Features/Known issues<br>
<br>
Generated code runs only under Windows NT and Windows 2000.<br>
1.) This is an advanced c++ programmer's tool using the STL libraries, method pointers,
shared memory etc.<br>
2.) The generated and provided source code compiles with Microsoft's Visual C++ compiler. <br>
3.) The generated source code must include and link with provided files that create a
framework for <br>
state machine instance creation and communication.<br>
4.) All state machine instances register themselves in a machine registry so that events
that might&nbsp; <br>
change their machine state can be directed to them from other state machines or external
interactions.<br>
5.) State machines instances given user defined names may receive events from other state
machines in <br>
other programs on the same computer.<br>
6.) A prototype alpha version of peer to peer TCIP code is included that will (eventually)
allow state machines <br>
on the network to send and receive events.<br>
7.) Both a Windows and a command line version of the state machine script parser are
provided.<br>
<br>
To use the parser, <br>
1.) Move one of the example state machine script files to a new directory (Test.sc,
MazeBuild.sc, MazeWalk.sc) <br>
from the zip files or the location they were unzipped to. The generated files in the
examples have been <br>
modified since being generated. They would be saved as dated backups by the parser but an
empty directory <br>
is better for this example.<br>
2.) Start winsparser.exe and press brows to browse to the script file location.<br>
3.) Press the parse button. A new &quot;.h&quot; file with a c++ class has been generated.
<br>
<br>
Note that if errors are found in the state machine script an error listing file is
created.<br>
<br>
Syntax of state Machine scripts<br>
<br>
// --------------- test.sc starting here---------<br>
<br>
// comments are like c++<br>
<br>
Name: Test // a name field gives the resulting state machine class name<br>
<br>
States{ opened, closed, locked } // list state names white space is like c++ I.E. line
feeds are ignored<br>
<br>
Events{ close, open, lock, unlock } // list the event names<br>
<br>
Actions{ Unlock, Lock, Close, Open, Nop } // list the action names, these become c++ class
methods<br>
<br>
Starting closed // set the initial state for the machine at boot<br>
<br>
// show for each state the events that cause an action and lead to a new state<br>
State: closed <br>
Event: open : Open : opened<br>
Event: unlock, close : Nop : closed // note that events were listed &quot; Event : unlock,
close :<br>
Event: lock : Lock : locked<br>
Default: Nop : closed } // just &quot;:&quot; and ending &quot;}&quot;, note that Default:
means any unlisted event<br>
<br>
State: opened // this is a comment<br>
Event: open, unlock, lock : Nop : opened<br>
Event: close : Close : closed<br>
Default: Nop : opened } <br>
<br>
State: locked<br>
Event: unlock : Unlock : closed<br>
Default: Nop : locked }<br>
<br>
Use of the generated files.<br>
<br>
The bundled files listed here must be added to your project.<br>
newutility.cpp<br>
newutility.h<br>
statemachine.h<br>
mregistry.h<br>
<br>
Examine the example programs to learn how to send and receive state <br>
changing events within a program and between separate programs.
<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua, times new roman, times">

<!--msthemeseparator--><p align="center"><img src="_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h5><!--mstheme--><font color="#660033">[_Zen_Soft]&nbsp; is a trademark of [_Zen_Soft]. All other products mentioned are
registered trademarks or trademarks of their respective companies.<br>
<br>
Questions or problems regarding this web site should be directed to
[scuddersaul@earthlink.com].<br>
Copyright © 2000[_Zen_Soft]. All rights reserved.<br>
Last modified: Monday June 26, 2000.<!--mstheme--></font></h5>
<!--mstheme--></font></td></tr><!--msnavigation--></table></body>
</html>
